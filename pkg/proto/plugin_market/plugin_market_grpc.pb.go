// proto/plugin_market.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: plugin_market.proto

package plugin_market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PluginManagerService_RegisterPlugin_FullMethodName     = "/plugin_market.PluginManagerService/RegisterPlugin"
	PluginManagerService_UnregisterPlugin_FullMethodName   = "/plugin_market.PluginManagerService/UnregisterPlugin"
	PluginManagerService_SendHeartbeat_FullMethodName      = "/plugin_market.PluginManagerService/SendHeartbeat"
	PluginManagerService_GetPlugin_FullMethodName          = "/plugin_market.PluginManagerService/GetPlugin"
	PluginManagerService_ListPlugins_FullMethodName        = "/plugin_market.PluginManagerService/ListPlugins"
	PluginManagerService_UpdatePluginStatus_FullMethodName = "/plugin_market.PluginManagerService/UpdatePluginStatus"
)

// PluginManagerServiceClient is the client API for PluginManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PluginManagerService 是插件管理器提供的 gRPC 服务
type PluginManagerServiceClient interface {
	// 插件注册与生命周期管理
	RegisterPlugin(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UnregisterPlugin(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// 宿主插件管理
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error)
	ListPlugins(ctx context.Context, in *ListPluginsRequest, opts ...grpc.CallOption) (*ListPluginsResponse, error)
	UpdatePluginStatus(ctx context.Context, in *UpdatePluginStatusRequest, opts ...grpc.CallOption) (*UpdatePluginStatusResponse, error)
}

type pluginManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginManagerServiceClient(cc grpc.ClientConnInterface) PluginManagerServiceClient {
	return &pluginManagerServiceClient{cc}
}

func (c *pluginManagerServiceClient) RegisterPlugin(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_RegisterPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerServiceClient) UnregisterPlugin(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_UnregisterPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_SendHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerServiceClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_GetPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerServiceClient) ListPlugins(ctx context.Context, in *ListPluginsRequest, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_ListPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginManagerServiceClient) UpdatePluginStatus(ctx context.Context, in *UpdatePluginStatusRequest, opts ...grpc.CallOption) (*UpdatePluginStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePluginStatusResponse)
	err := c.cc.Invoke(ctx, PluginManagerService_UpdatePluginStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginManagerServiceServer is the server API for PluginManagerService service.
// All implementations must embed UnimplementedPluginManagerServiceServer
// for forward compatibility
//
// PluginManagerService 是插件管理器提供的 gRPC 服务
type PluginManagerServiceServer interface {
	// 插件注册与生命周期管理
	RegisterPlugin(context.Context, *RegisterRequest) (*RegisterResponse, error)
	UnregisterPlugin(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// 宿主插件管理
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
	ListPlugins(context.Context, *ListPluginsRequest) (*ListPluginsResponse, error)
	UpdatePluginStatus(context.Context, *UpdatePluginStatusRequest) (*UpdatePluginStatusResponse, error)
	mustEmbedUnimplementedPluginManagerServiceServer()
}

// UnimplementedPluginManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginManagerServiceServer struct {
}

func (UnimplementedPluginManagerServiceServer) RegisterPlugin(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedPluginManagerServiceServer) UnregisterPlugin(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPlugin not implemented")
}
func (UnimplementedPluginManagerServiceServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedPluginManagerServiceServer) GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedPluginManagerServiceServer) ListPlugins(context.Context, *ListPluginsRequest) (*ListPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedPluginManagerServiceServer) UpdatePluginStatus(context.Context, *UpdatePluginStatusRequest) (*UpdatePluginStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePluginStatus not implemented")
}
func (UnimplementedPluginManagerServiceServer) mustEmbedUnimplementedPluginManagerServiceServer() {}

// UnsafePluginManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginManagerServiceServer will
// result in compilation errors.
type UnsafePluginManagerServiceServer interface {
	mustEmbedUnimplementedPluginManagerServiceServer()
}

func RegisterPluginManagerServiceServer(s grpc.ServiceRegistrar, srv PluginManagerServiceServer) {
	s.RegisterService(&PluginManagerService_ServiceDesc, srv)
}

func _PluginManagerService_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).RegisterPlugin(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManagerService_UnregisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).UnregisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_UnregisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).UnregisterPlugin(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManagerService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManagerService_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManagerService_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).ListPlugins(ctx, req.(*ListPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginManagerService_UpdatePluginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePluginStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginManagerServiceServer).UpdatePluginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginManagerService_UpdatePluginStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginManagerServiceServer).UpdatePluginStatus(ctx, req.(*UpdatePluginStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginManagerService_ServiceDesc is the grpc.ServiceDesc for PluginManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin_market.PluginManagerService",
	HandlerType: (*PluginManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _PluginManagerService_RegisterPlugin_Handler,
		},
		{
			MethodName: "UnregisterPlugin",
			Handler:    _PluginManagerService_UnregisterPlugin_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _PluginManagerService_SendHeartbeat_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _PluginManagerService_GetPlugin_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _PluginManagerService_ListPlugins_Handler,
		},
		{
			MethodName: "UpdatePluginStatus",
			Handler:    _PluginManagerService_UpdatePluginStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin_market.proto",
}

const (
	IPluginService_Execute_FullMethodName    = "/plugin_market.IPluginService/Execute"
	IPluginService_StreamData_FullMethodName = "/plugin_market.IPluginService/StreamData"
)

// IPluginServiceClient is the client API for IPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IPluginService 是插件必须实现的接口，供宿主调用
type IPluginServiceClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	StreamData(ctx context.Context, opts ...grpc.CallOption) (IPluginService_StreamDataClient, error)
}

type iPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPluginServiceClient(cc grpc.ClientConnInterface) IPluginServiceClient {
	return &iPluginServiceClient{cc}
}

func (c *iPluginServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, IPluginService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPluginServiceClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (IPluginService_StreamDataClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IPluginService_ServiceDesc.Streams[0], IPluginService_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &iPluginServiceStreamDataClient{ClientStream: stream}
	return x, nil
}

type IPluginService_StreamDataClient interface {
	Send(*StreamDataRequest) error
	Recv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type iPluginServiceStreamDataClient struct {
	grpc.ClientStream
}

func (x *iPluginServiceStreamDataClient) Send(m *StreamDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iPluginServiceStreamDataClient) Recv() (*StreamDataResponse, error) {
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IPluginServiceServer is the server API for IPluginService service.
// All implementations must embed UnimplementedIPluginServiceServer
// for forward compatibility
//
// IPluginService 是插件必须实现的接口，供宿主调用
type IPluginServiceServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	StreamData(IPluginService_StreamDataServer) error
	mustEmbedUnimplementedIPluginServiceServer()
}

// UnimplementedIPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPluginServiceServer struct {
}

func (UnimplementedIPluginServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedIPluginServiceServer) StreamData(IPluginService_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedIPluginServiceServer) mustEmbedUnimplementedIPluginServiceServer() {}

// UnsafeIPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPluginServiceServer will
// result in compilation errors.
type UnsafeIPluginServiceServer interface {
	mustEmbedUnimplementedIPluginServiceServer()
}

func RegisterIPluginServiceServer(s grpc.ServiceRegistrar, srv IPluginServiceServer) {
	s.RegisterService(&IPluginService_ServiceDesc, srv)
}

func _IPluginService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPluginServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPluginService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPluginServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPluginService_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IPluginServiceServer).StreamData(&iPluginServiceStreamDataServer{ServerStream: stream})
}

type IPluginService_StreamDataServer interface {
	Send(*StreamDataResponse) error
	Recv() (*StreamDataRequest, error)
	grpc.ServerStream
}

type iPluginServiceStreamDataServer struct {
	grpc.ServerStream
}

func (x *iPluginServiceStreamDataServer) Send(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iPluginServiceStreamDataServer) Recv() (*StreamDataRequest, error) {
	m := new(StreamDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IPluginService_ServiceDesc is the grpc.ServiceDesc for IPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin_market.IPluginService",
	HandlerType: (*IPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _IPluginService_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _IPluginService_StreamData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin_market.proto",
}

const (
	HostService_Log_FullMethodName           = "/plugin_market.HostService/Log"
	HostService_GetHostConfig_FullMethodName = "/plugin_market.HostService/GetHostConfig"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HostService 是宿主可能实现的接口，供插件反向调用
type HostServiceClient interface {
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	GetHostConfig(ctx context.Context, in *GetHostConfigRequest, opts ...grpc.CallOption) (*GetHostConfigResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, HostService_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHostConfig(ctx context.Context, in *GetHostConfigRequest, opts ...grpc.CallOption) (*GetHostConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostConfigResponse)
	err := c.cc.Invoke(ctx, HostService_GetHostConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility
//
// HostService 是宿主可能实现的接口，供插件反向调用
type HostServiceServer interface {
	Log(context.Context, *LogRequest) (*LogResponse, error)
	GetHostConfig(context.Context, *GetHostConfigRequest) (*GetHostConfigResponse, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedHostServiceServer) GetHostConfig(context.Context, *GetHostConfigRequest) (*GetHostConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostConfig not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHostConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetHostConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostConfig(ctx, req.(*GetHostConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin_market.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _HostService_Log_Handler,
		},
		{
			MethodName: "GetHostConfig",
			Handler:    _HostService_GetHostConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin_market.proto",
}
